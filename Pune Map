#include <iostream>
#include <climits>
#include <string>

#define V 10

using namespace std;

string locations[V] = {
    "Shaniwar Wada",
    "Aga Khan Palace",
    "Dagadusheth Halwai Ganapati Temple",
    "Sinhagad Fort",
    "Raja Dinkar Kelkar Museum",
    "Osho Ashram",
    "Parvati Hill and Temple",
    "Lal Mahal",
    "Shinde Chhatri",
    "FC Road"
};

int minDistance(int dist[], bool sptSet[]) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++) {
        if (sptSet[v] == false && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

void printPath(int parent[], int j) {
    if (parent[j] == -1) {
        cout << locations[j];
        return;
    }
    printPath(parent, parent[j]);
    cout << " -> " << locations[j];
}

void printSolution(int dist[], int parent[], int src, int n) {
    cout << "Shortest Path from " << locations[src] << " to " << locations[n] << ":\n";
    printPath(parent, n);
    cout << "\nDistance: " << dist[n] << " km\n";
}

void dijkstra(int graph[V][V], int src, int dest) {
    int dist[V];
    bool sptSet[V];
    int parent[V];

    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }

    dist[src] = 0;
    parent[src] = -1;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet);
        sptSet[u] = true;
        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
        }
    }

    printSolution(dist, parent, src, dest);
}

void printLocationsWithIndices() {
    cout << "Available Locations:\n";
    for (int i = 0; i < V; ++i) {
        cout << "Vertex " << i << ": " << locations[i] << endl;
    }
}

int main() {
    char choice;
    int src = 0, dest = 0;

    do {
        if (choice != 'N' && choice != 'n') {
            printLocationsWithIndices();
            cout << "Enter your current location (vertex number): ";
            cin >> src;
        }

        cout << "Enter your destination location (vertex number): ";
        cin >> dest;

         int graph[V][V] = {
            {0, 5, 8, 0, 0, 0, 0, 0, 0, 0},
            {5, 0, 0, 7, 10, 0, 0, 0, 0, 0},
            {8, 0, 0, 0, 4, 2, 0, 0, 0, 0},
            {0, 7, 0, 0, 6, 0, 0, 0, 0, 0},
            {0, 10, 4, 6, 0, 3, 0, 0, 0, 0},
            {0, 0, 2, 0, 3, 0, 1, 0, 0, 0},
            {0, 0, 0, 0, 0, 1, 0, 4, 6, 0},
            {0, 0, 0, 0, 0, 0, 4, 0, 5, 0},
            {0, 0, 0, 0, 0, 0, 6, 5, 0, 7},
            {0, 0, 0, 0, 0, 0, 0, 0, 7, 0}
        };

        dijkstra(graph, src, dest);

        cout << "Your current location is " << locations[dest] << ". Do you want to reset location? (Y/N/E): ";
        cin >> choice;

        if (choice == 'E' || choice == 'e') {
            cout << "Happy journey!\n";
            break;
        } else if (choice != 'Y' && choice != 'y' && choice != 'N' && choice != 'n') {
            cout << "Invalid choice. Exiting.\n";
            break;
        } else if (choice == 'N' || choice == 'n') {
            src = dest;
        }

    } while (choice == 'Y' || choice == 'y' || (choice == 'N' || choice == 'n'));

    return 0;
}
